<?php
/**
 * Plugin Name: Crystal House Calculator
 * Description: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ—Å–ª—É–≥ –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è –∑ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é –≤ Telegram
 * Version: 1.0.3
 * Author: –ê–≤—Ä–∞–º–µ–Ω–∫–æ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä
 */

// –ó–∞–ø—Ä–µ—â–∞–µ–º –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø
if (!defined('ABSPATH')) {
    exit;
}

class CrystalHouseCalculator {
    
    public function __construct() {
        add_action('init', array($this, 'init'));
        add_action('wp_enqueue_scripts', array($this, 'enqueue_scripts'));
        add_action('wp_ajax_crystal_send_telegram', array($this, 'handle_telegram_request'));
        add_action('wp_ajax_nopriv_crystal_send_telegram', array($this, 'handle_telegram_request'));
        add_action('wp_ajax_crystal_test_chats', array($this, 'handle_test_chats'));
        add_action('admin_menu', array($this, 'admin_menu'));
        
        // –û—Ç–ª–∞–¥–∫–∞
        add_action('wp_footer', array($this, 'debug_scripts'));
    }
    
    public function init() {
        add_shortcode('crystal_calculator', array($this, 'render_calculator'));
    }
    
    public function enqueue_scripts() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
        wp_enqueue_script('jquery');
        wp_enqueue_script('crystal-calculator', plugin_dir_url(__FILE__) . 'calculator.js', array('jquery'), '1.0.3', true);
        wp_localize_script('crystal-calculator', 'crystal_ajax', array(
            'ajax_url' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('crystal_nonce'),
            'page_url' => get_permalink(),
            'page_title' => get_the_title()
        ));
    }
    
    public function debug_scripts() {
        if (is_user_logged_in() && current_user_can('administrator')) {
            ?>
            <script>
            console.log('Crystal Calculator Debug:');
            console.log('AJAX URL:', '<?php echo admin_url('admin-ajax.php'); ?>');
            console.log('Plugin URL:', '<?php echo plugin_dir_url(__FILE__); ?>');
            console.log('Calculator JS exists:', typeof crystal_ajax !== 'undefined');
            </script>
            <?php
        }
    }
    
    public function render_calculator($atts) {
        $atts = shortcode_atts(array(
            'bot_token' => get_option('crystal_bot_token', ''),
            'chat_ids' => get_option('crystal_chat_ids', '')
        ), $atts);
        
        ob_start();
        $template_path = plugin_dir_path(__FILE__) . 'calculator-template.php';
        
        if (file_exists($template_path)) {
            include $template_path;
        } else {
            echo '<div style="color:red;">–ü–æ–º–∏–ª–∫–∞: —à–∞–±–ª–æ–Ω –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ ' . $template_path . '</div>';
        }
        
        return ob_get_clean();
    }
    
    public function handle_telegram_request() {
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        error_log('Crystal Calculator: AJAX request received');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º nonce
        if (!wp_verify_nonce($_POST['nonce'], 'crystal_nonce')) {
            error_log('Crystal Calculator: Nonce verification failed');
            wp_send_json_error('–ù–µ–≤—ñ—Ä–Ω–∞ –±–µ–∑–ø–µ–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞');
            return;
        }
        
        $bot_token = get_option('crystal_bot_token');
        $chat_ids_raw = get_option('crystal_chat_ids');
        
        if (empty($bot_token) || empty($chat_ids_raw)) {
            wp_send_json_error('Telegram –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –≤ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ');
            return;
        }
        
        // –ü–∞—Ä—Å–∏–º Chat IDs
        $chat_ids = array_filter(array_map('trim', explode("\n", $chat_ids_raw)));
        
        if (empty($chat_ids)) {
            wp_send_json_error('–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ Chat ID');
            return;
        }
        
        error_log('Crystal Calculator: Found ' . count($chat_ids) . ' chat IDs');
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        $form_data_json = sanitize_text_field($_POST['formData']);
        $data = json_decode(stripslashes($form_data_json), true);
        
        if (!$data || !isset($data['clientName']) || !isset($data['clientPhone'])) {
            wp_send_json_error('–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –¥–∞–Ω—ñ');
            return;
        }
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        $messages = $this->prepare_telegram_messages($data);
        
        if (empty($messages)) {
            wp_send_json_error('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è');
            return;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ —á–∞—Ç—ã
        $success_count = 0;
        $total_chats = count($chat_ids);
        
        foreach ($chat_ids as $chat_id) {
            $success = $this->send_multiple_telegram_messages($bot_token, $chat_id, $messages);
            if ($success) {
                $success_count++;
                error_log("Crystal Calculator: Messages sent successfully to chat $chat_id");
            } else {
                error_log("Crystal Calculator: Failed to send messages to chat $chat_id");
            }
            
            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –≤ —Ä–∞–∑–Ω—ã–µ —á–∞—Ç—ã
            sleep(1);
        }
        
        if ($success_count > 0) {
            $message = "–ó–∞—è–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞! –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ $success_count –∑ $total_chats —á–∞—Ç—ñ–≤.";
            wp_send_json_success($message);
        } else {
            wp_send_json_error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–æ Telegram —É –≤—Å—ñ—Ö —á–∞—Ç–∞—Ö');
        }
    }
    
    private function send_telegram_message($bot_token, $chat_id, $message) {
        $url = "https://api.telegram.org/bot$bot_token/sendMessage";
        
        $data = array(
            'chat_id' => $chat_id,
            'text' => $message,
            'parse_mode' => 'HTML'
        );
        
        $response = wp_remote_post($url, array(
            'body' => $data,
            'timeout' => 30
        ));
        
        if (is_wp_error($response)) {
            error_log('Crystal Calculator: Telegram API error - ' . $response->get_error_message());
            return false;
        }
        
        $body = wp_remote_retrieve_body($response);
        $result = json_decode($body, true);
        
        error_log('Crystal Calculator: Telegram API response - ' . $body);
        
        return $result && $result['ok'];
    }
    
    private function send_multiple_telegram_messages($bot_token, $chat_id, $messages) {
        $all_sent = true;
        
        foreach ($messages as $index => $message) {
            $success = $this->send_telegram_message($bot_token, $chat_id, $message);
            if (!$success) {
                $all_sent = false;
            }
            
            if ($index < count($messages) - 1) {
                sleep(1);
            }
        }
        
        return $all_sent;
    }
    
    private function prepare_telegram_messages($data) {
        $messages = array();
        
        // 1. –û–°–ù–û–í–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï
        $message1 = "üßπ <b>–ù–û–í–ê –ó–ê–Ø–í–ö–ê –ù–ê –ü–†–ò–ë–ò–†–ê–ù–ù–Ø</b>\n\n";
        
        // –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        $message1 .= "üë§ <b>–ö–û–ù–¢–ê–ö–¢–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø:</b>\n";
        $message1 .= "‚Ä¢ –Ü–º'—è: " . ($data['clientName'] ?? '–ù–µ –≤–∫–∞–∑–∞–Ω–æ') . "\n";
        $message1 .= "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: " . ($data['clientPhone'] ?? '–ù–µ –≤–∫–∞–∑–∞–Ω–æ') . "\n\n";
        
        $message1 .= "üìã <b>–û–°–ù–û–í–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø:</b>\n";
        $message1 .= "‚Ä¢ –ü–∞–∫–µ—Ç: " . ($data['package'] ?? '–ù–µ –≤–∫–∞–∑–∞–Ω–æ') . "\n";
        $message1 .= "‚Ä¢ –ü–ª–æ—â–∞: " . ($data['area'] ?? '0') . " –º¬≤\n";
        $message1 .= "‚Ä¢ –ó–∞–±—Ä—É–¥–Ω–µ–Ω—ñ—Å—Ç—å: " . ($data['soil'] ?? '–°—Ç–∞–Ω–¥–∞—Ä—Ç') . "\n";
        
        if (!empty($data['rate'])) {
            $message1 .= "‚Ä¢ –°—Ç–∞–≤–∫–∞: " . ($data['rate'] ?? '0') . " –≥—Ä–Ω/–º¬≤\n";
        }
        
        $message1 .= "‚Ä¢ –°–∞–Ω–≤—É–∑–ª–∏: " . ($data['bathrooms'] ?? '1') . " —à—Ç\n";
        $message1 .= "‚Ä¢ –£–Ω—ñ—Ç–∞–∑–∏: " . ($data['toilets'] ?? '1') . " —à—Ç\n";
        
        if (!empty($data['distance']) && $data['distance'] > 0) {
            $message1 .= "‚Ä¢ –í–∏—ó–∑–¥ –∑–∞ –º—ñ—Å—Ç–æ: " . ($data['distance'] ?? '0') . " –∫–º\n";
        }
        
        if (!empty($data['loyaltyDiscount'])) {
            $message1 .= "‚Ä¢ 5-—Ç–µ –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è: –¢–∞–∫ (–∑–Ω–∏–∂–∫–∞ -15%)\n";
        }
        
        $message1 .= "\nüí∞ <b>–ó–ê–ì–ê–õ–¨–ù–ê –°–£–ú–ê: " . ($data['total'] ?? '0') . "</b>";
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        $message1 .= "\n\nüåê <b>–î–ñ–ï–†–ï–õ–û –ó–ê–Ø–í–ö–ò:</b>\n";
        if (!empty($data['pageTitle'])) {
            $message1 .= "‚Ä¢ –°—Ç–æ—Ä—ñ–Ω–∫–∞: " . $data['pageTitle'] . "\n";
        }
        if (!empty($data['pageUrl'])) {
            $message1 .= "‚Ä¢ URL: " . $data['pageUrl'] . "\n";
        }
        
        $message1 .= "‚Ä¢ –ß–∞—Å –∑–∞—è–≤–∫–∏: " . current_time('d.m.Y H:i:s');
        
        $messages[] = $message1;
        
        // 2. –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–°–õ–£–ì–ò
        $extras = array();
        
        if (!empty($data['windows'])) {
            $extras[] = "ü™ü –ú–∏—Ç—Ç—è –≤—ñ–∫–æ–Ω (" . ($data['windowsArea'] ?? '0') . " –º¬≤ √ó " . ($data['windowsRate'] ?? '240') . " –≥—Ä–Ω)";
        }
        
        if (!empty($data['balcony'])) {
            $extras[] = "üè† –ë–∞–ª–∫–æ–Ω (" . ($data['balconyQty'] ?? '1') . " —à—Ç)";
        }
        
        if (!empty($data['loggia'])) {
            $extras[] = "üè¢ –õ–æ–¥–∂—ñ—è (" . ($data['loggiaQty'] ?? '1') . " —à—Ç)";
        }
        
        $additional_services = array(
            'walls' => 'üßΩ –ú–∏—Ç—Ç—è —Å—Ç—ñ–Ω',
            'ironing' => 'üëî –ü—Ä–∞—Å—É–≤–∞–Ω–Ω—è',
            'dishes' => 'üçΩÔ∏è –ú–∏—Ç—Ç—è –ø–æ—Å—É–¥—É',
            'pettray' => 'üê± –ú–∏—Ç—Ç—è –ª–æ—Ç–∫–∞ —É–ª—é–±–ª–µ–Ω—Ü—è',
            'laundry' => 'üëï –ü—Ä–∞–Ω–Ω—è',
            'hood' => 'üí® –ú–∏—Ç—Ç—è –≤–∏—Ç—è–∂–∫–∏',
            'oven' => 'üî• –ú–∏—Ç—Ç—è –¥—É—Ö–æ–≤–∫–∏',
            'microwave' => 'üì± –ú—ñ–∫—Ä–æ—Ö–≤–∏–ª—å–æ–≤–∞',
            'fridge' => '‚ùÑÔ∏è –•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫',
            'kitchencab' => 'üö™ –®–∞—Ñ–∏ –∫—É—Ö–æ–Ω–Ω—ñ',
            'grill' => 'üî• –ú–∏—Ç—Ç—è –≥—Ä–∏–ª—é',
            'addbath' => 'üöø –î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Å–∞–Ω–≤—É–∑–æ–ª',
            'addtoilet' => 'üöΩ –î–æ–¥–∞—Ç–∫–æ–≤–∏–π —É–Ω—ñ—Ç–∞–∑',
            'organize' => 'üì¶ –°–∫–ª–∞–¥–∞–Ω–Ω—è —Ä–µ—á–µ–π',
            'curtains' => 'ü™ü –®—Ç–æ—Ä–∏/—Ç—é–ª—ñ',
            'vacuum' => 'üßπ –ü–∏–ª–æ—Å–æ—Å –∫–æ–º–ø–∞–Ω—ñ—ó',
            'keys' => 'üóùÔ∏è –î–æ—Å—Ç–∞–≤–∫–∞ –∫–ª—é—á—ñ–≤'
        );
        
        foreach ($additional_services as $key => $label) {
            if (!empty($data[$key])) {
                $qty = !empty($data[$key . 'Qty']) ? " (" . $data[$key . 'Qty'] . ")" : "";
                $amount = !empty($data['curtainsAmount']) && $key === 'curtains' ? " (" . $data['curtainsAmount'] . " –≥—Ä–Ω)" : "";
                $extras[] = $label . $qty . $amount;
            }
        }
        
        // –•–∏–º—á–∏—Å—Ç–∫–∞
        $chemServices = [
            'chemsofa2Qty' => '–î–∏–≤–∞–Ω 2 –º—ñ—Å—Ü—è',
            'chemsofa3Qty' => '–î–∏–≤–∞–Ω 3 –º—ñ—Å—Ü—è', 
            'chemsofa4Qty' => '–î–∏–≤–∞–Ω 4 –º—ñ—Å—Ü—è',
            'chemsofa5Qty' => '–î–∏–≤–∞–Ω 5 –º—ñ—Å—Ü—å',
            'chemsofa6Qty' => '–î–∏–≤–∞–Ω 6 –º—ñ—Å—Ü—å',
            'chemarmchairQty' => '–ö—Ä—ñ—Å–ª–æ',
            'chemmattress2Qty' => '–ú–∞—Ç—Ä–∞—Ü –¥–≤–æ–º—ñ—Å–Ω–∏–π',
            'chemmattress1Qty' => '–ú–∞—Ç—Ä–∞—Ü –æ–¥–Ω–æ–º—ñ—Å–Ω–∏–π',
            'chemchairQty' => '–°—Ç—ñ–ª—å—Ü—ñ',
            'chemheadboard' => '–ë–∏–ª—å—Ü–µ –ª—ñ–∂–∫–∞'
        ];

        foreach ($chemServices as $key => $label) {
            if (!empty($data[$key]) && $data[$key] > 0) {
                $qty = $data[$key];
                if ($key === 'chemheadboard') {
                    $extras[] = "üßº " . $label . " (" . $qty . " –≥—Ä–Ω)";
                } else {
                    $extras[] = "üßº " . $label . " (" . $qty . " —à—Ç)";
                }
            }
        }

        // –ü–æ–¥—É—à–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
        if (!empty($data['chemPillow']) && $data['chemPillow'] > 0) {
            $pillowRate = $data['chemPillowRate'] ?? 60;
            $extras[] = "üßº –ü–æ–¥—É—à–∫–∏ (" . $data['chemPillow'] . " √ó " . $pillowRate . " –≥—Ä–Ω)";
        }
        
        if (!empty($extras)) {
            $message2 = "üîß <b>–î–û–î–ê–¢–ö–û–í–Ü –ü–û–°–õ–£–ì–ò:</b>\n\n";
            foreach ($extras as $extra) {
                $message2 .= "‚Ä¢ " . $extra . "\n";
            }
            $messages[] = $message2;
        }
        
        return $messages;
    }
    
    private function test_chat_access($bot_token, $chat_id) {
        $url = "https://api.telegram.org/bot$bot_token/getChat";
        
        $response = wp_remote_post($url, array(
            'body' => array('chat_id' => $chat_id),
            'timeout' => 10
        ));
        
        if (is_wp_error($response)) {
            return false;
        }
        
        $body = wp_remote_retrieve_body($response);
        $result = json_decode($body, true);
        
        return $result && $result['ok'];
    }

    // –ò –º–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤
    public function test_all_chats() {
        $bot_token = get_option('crystal_bot_token');
        $chat_ids_raw = get_option('crystal_chat_ids');
        
        if (empty($bot_token) || empty($chat_ids_raw)) {
            return array('error' => '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ');
        }
        
        $chat_ids = array_filter(array_map('trim', explode("\n", $chat_ids_raw)));
        $results = array();
        
        foreach ($chat_ids as $chat_id) {
            $accessible = $this->test_chat_access($bot_token, $chat_id);
            $results[$chat_id] = $accessible;
        }
        
        return $results;
    }
    
    public function handle_test_chats() {
        if (!current_user_can('manage_options')) {
            wp_send_json_error('–ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É');
            return;
        }
        
        $results = $this->test_all_chats();
        
        if (isset($results['error'])) {
            wp_send_json_error($results['error']);
        } else {
            wp_send_json_success($results);
        }
    }
    
    public function admin_menu() {
        add_options_page(
            'Crystal House Calculator',
            'Crystal Calculator',
            'manage_options',
            'crystal-calculator',
            array($this, 'admin_page')
        );
    }
    
    public function admin_page() {
        if (isset($_POST['submit'])) {
            update_option('crystal_bot_token', sanitize_text_field($_POST['bot_token']));
            update_option('crystal_chat_ids', sanitize_textarea_field($_POST['chat_ids']));
            echo '<div class="notice notice-success"><p>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!</p></div>';
        }
        
        $bot_token = get_option('crystal_bot_token', '');
        $chat_ids = get_option('crystal_chat_ids', '');
        ?>
        <div class="wrap">
            <h1>Crystal House Calculator</h1>
            <form method="post" action="">
                <table class="form-table">
                    <tr>
                        <th scope="row">Telegram Bot Token</th>
                        <td>
                            <input type="text" name="bot_token" value="<?php echo esc_attr($bot_token); ?>" class="regular-text" />
                            <p class="description">–û—Ç—Ä–∏–º–∞–π—Ç–µ —Ç–æ–∫–µ–Ω –≤—ñ–¥ @BotFather –≤ Telegram</p>
                        </td>
                    </tr>
                    <tr>
                        <th scope="row">Chat IDs</th>
                        <td>
                            <textarea name="chat_ids" rows="5" class="large-text" placeholder="1679157073&#10;-1001234567890&#10;987654321"><?php echo esc_textarea($chat_ids); ?></textarea>
                            <p class="description">
                                <strong>–í–≤–µ–¥—ñ—Ç—å –∫–æ–∂–µ–Ω Chat ID –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞:</strong><br>
                                ‚Ä¢ –û—Å–æ–±–∏—Å—Ç–∏–π —á–∞—Ç: –∑–≤–∏—á–∞–π–Ω–∏–π ID (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 1679157073)<br>
                                ‚Ä¢ –ì—Ä—É–ø–∞/–∫–∞–Ω–∞–ª: ID –∑ –º—ñ–Ω—É—Å–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: -1001234567890)<br>
                                ‚Ä¢ –ú–æ–∂–Ω–∞ –¥–æ–¥–∞–≤–∞—Ç–∏ –¥–æ 10 –æ—Ç—Ä–∏–º—É–≤–∞—á—ñ–≤
                            </p>
                        </td>
                    </tr>
                </table>
                <?php submit_button(); ?>
            </form>
            
            <h2>–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–æ —á–∞—Ç—ñ–≤</h2>
            <button type="button" id="testChats" class="button">–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ —á–∞—Ç—ñ–≤</button>
            <div id="testResults" style="margin-top:10px;"></div>
            
            <h2>–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è</h2>
            <p>–î–æ–¥–∞–π—Ç–µ —à–æ—Ä—Ç–∫–æ–¥ <code>[crystal_calculator]</code> –Ω–∞ –±—É–¥—å-—è–∫—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –∞–±–æ –ø–æ—Å—Ç.</p>
            <p>–î–ª—è Elementor: –¥–æ–¥–∞–π—Ç–µ –≤—ñ–¥–∂–µ—Ç "–®–æ—Ä—Ç–∫–æ–¥" —ñ –≤—Å—Ç–∞–≤—Ç–µ <code>[crystal_calculator]</code></p>
            
            <h2>–í—ñ–¥–ª–∞–¥–∫–∞</h2>
            <p>–¢–æ–∫–µ–Ω –±–æ—Ç–∞: <?php echo $bot_token ? '<span style="color:green;">–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</span>' : '<span style="color:red;">–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</span>'; ?></p>
            <?php 
            if ($chat_ids) {
                $ids_array = array_filter(array_map('trim', explode("\n", $chat_ids)));
                echo '<p>Chat IDs (' . count($ids_array) . '): <span style="color:green;">–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</span></p>';
                echo '<ul>';
                foreach ($ids_array as $id) {
                    echo '<li>' . esc_html($id) . '</li>';
                }
                echo '</ul>';
            } else {
                echo '<p>Chat IDs: <span style="color:red;">–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</span></p>';
            }
            ?>
            
            <h2>–í–∞–∂–ª–∏–≤—ñ –ø—Ä–∏–º—ñ—Ç–∫–∏</h2>
            <ul>
                <li><strong>–û—Å–æ–±–∏—Å—Ç–∏–π —á–∞—Ç:</strong> –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–≤–∏–Ω–µ–Ω —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–ø–∏—Å–∞—Ç–∏ –±–æ—Ç—É (–Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ /start)</li>
                <li><strong>–ì—Ä—É–ø–∞:</strong> –î–æ–¥–∞–π—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø—É —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞</li>
                <li><strong>–ö–∞–Ω–∞–ª:</strong> –î–æ–¥–∞–π—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑ –ø—Ä–∞–≤–∞–º–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó</li>
                <li><strong>URL —Å—Ç–æ—Ä—ñ–Ω–∫–∏:</strong> –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ–¥–∞—î—Ç—å—Å—è –¥–æ –∫–æ–∂–Ω–æ—ó –∑–∞—è–≤–∫–∏</li>
            </ul>
        </div>
        
        <script>
        jQuery(document).ready(function($) {
            $('#testChats').click(function() {
                var $btn = $(this);
                var $results = $('#testResults');
                
                $btn.prop('disabled', true).text('–ü–µ—Ä–µ–≤—ñ—Ä—è—é...');
                $results.html('<p>–¢–µ—Å—Ç—É—î–º–æ –¥–æ—Å—Ç—É–ø –¥–æ —á–∞—Ç—ñ–≤...</p>');
                
                $.post(ajaxurl, {
                    action: 'crystal_test_chats'
                }, function(response) {
                    if (response.success) {
                        var html = '<h3>–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:</h3><ul>';
                        $.each(response.data, function(chatId, accessible) {
                            var status = accessible ? '<span style="color:green;">‚úÖ –î–æ—Å—Ç—É–ø–Ω–∏–π</span>' : '<span style="color:red;">‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π</span>';
                            html += '<li><strong>' + chatId + ':</strong> ' + status + '</li>';
                        });
                        html += '</ul>';
                        $results.html(html);
                    } else {
                        $results.html('<p style="color:red;">–ü–æ–º–∏–ª–∫–∞: ' + response.data + '</p>');
                    }
                }).always(function() {
                    $btn.prop('disabled', false).text('–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ —á–∞—Ç—ñ–≤');
                });
            });
        });
        </script>
        <?php
    }
}

new CrystalHouseCalculator();
